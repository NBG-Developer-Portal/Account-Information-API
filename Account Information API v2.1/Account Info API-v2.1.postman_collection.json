{
	"info": {
		"_postman_id": "4642fb4c-009b-4c5a-a286-10f30d2f8676",
		"name": "Account Info API v2.1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Sandbox",
			"item": [
				{
					"name": "Create Sandbox",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Client-Id",
								"type": "text",
								"value": "{{client_id}}"
							},
							{
								"key": "Request-Id",
								"type": "text",
								"value": "{{$guid}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{$guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"sandboxId\": \"{{sandbox_id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/sandbox",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"sandbox"
							]
						},
						"description": "A Sandbox with default data is created. Simply call by providing an “id” as your sandbox id and naming it almost anything you like."
					},
					"response": []
				},
				{
					"name": "Export Sandbox",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Client-Id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "Request-Id",
								"value": "{{$guid}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{root_url}}/sandbox/{{sandbox_id}}",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"sandbox",
								"{{sandbox_id}}"
							]
						},
						"description": "Export a sandbox"
					},
					"response": []
				},
				{
					"name": "Import Sandbox",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Client-Id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "Request-Id",
								"value": "{{$guid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{$guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"sandboxId\": \"{{sandbox_id}}\",\n        \"version\": 2,\n        \"users\": [\n            {\n                \"accounts\": [\n                    {\n                        \"account\": {\n                            \"accountType\": \"3000\",\n                            \"overdraftLimit\": -1000,\n                            \"numberOfMandates\": null,\n                            \"serialNo\": null,\n                            \"account\": \"67890123456\",\n                            \"iban\": \"GR5301106780000067890123456\",\n                            \"currency\": \"EUR\",\n                            \"alias\": \"Account 1\",\n                            \"product\": null,\n                            \"ledgerBalance\": 500000,\n                            \"availableBalance\": 500000,\n                            \"newMoneyBalance\": 0,\n                            \"flag\": null,\n                            \"allowConnect\": null,\n                            \"allowDebit\": null,\n                            \"allowCredit\": null,\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": null\n                        },\n                        \"transactions\": [\n                            {\n                                \"serialNum\": \"1\",\n                                \"date\": \"2020-02-05T12:28:44.3579786Z\",\n                                \"branch\": null,\n                                \"trans\": \"20\",\n                                \"transDescription\": null,\n                                \"amount\": -25,\n                                \"currency\": \"070\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Debit\",\n                                \"valeur\": \"2020-02-05T12:28:44.3579786Z\",\n                                \"description\": \"Check deposit Federer\",\n                                \"accountingBalance\": 500000,\n                                \"reference\": \"12345678901234567890\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR5301106780000067890123456\",\n                                \"relatedName\": \"ΠΑΠΑΔΟΠΟΥΛΟΣ ΓΕΩΡΓΙΟΣ\",\n                                \"timestamp\": null\n                            },\n                            {\n                                \"serialNum\": \"2\",\n                                \"date\": \"2020-02-04T12:28:44.3579786Z\",\n                                \"branch\": null,\n                                \"trans\": \"64\",\n                                \"transDescription\": null,\n                                \"amount\": 450.86,\n                                \"currency\": \"070\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Credit\",\n                                \"valeur\": \"2020-02-04T12:28:44.3579786Z\",\n                                \"description\": \"Fund Transfer 1\",\n                                \"accountingBalance\": 499549.14,\n                                \"reference\": \"12345678901234567891\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR5301106780000067890123456\",\n                                \"relatedName\": \"ΠΑΠΑΔΟΠΟΥΛΟΣ ΓΕΩΡΓΙΟΣ\",\n                                \"timestamp\": null\n                            },\n                            {\n                                \"serialNum\": \"3\",\n                                \"date\": \"2020-02-03T12:28:44.3579786Z\",\n                                \"branch\": null,\n                                \"trans\": \"64\",\n                                \"transDescription\": null,\n                                \"amount\": 400.86,\n                                \"currency\": \"070\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Credit\",\n                                \"valeur\": \"2020-02-03T12:28:44.3579786Z\",\n                                \"description\": \"Fund Transfer 2\",\n                                \"accountingBalance\": 499599.14,\n                                \"reference\": \"12345678901234567892\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR5301106780000067890123456\",\n                                \"relatedName\": \"ΠΑΠΑΔΟΠΟΥΛΟΣ ΓΕΩΡΓΙΟΣ\",\n                                \"timestamp\": null\n                            },\n                            {\n                                \"serialNum\": \"4\",\n                                \"date\": \"2020-02-05T12:28:44.3579786Z\",\n                                \"branch\": \"700\",\n                                \"trans\": \"68\",\n                                \"transDescription\": null,\n                                \"amount\": -100,\n                                \"currency\": \"070\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Debit\",\n                                \"valeur\": \"2020-02-05T12:28:44.3579786Z\",\n                                \"description\": \"SEPA TRANSFER\",\n                                \"accountingBalance\": 500000,\n                                \"reference\": \"77148764243232803409\",\n                                \"externalSystem\": \"ROT\",\n                                \"relatedAccount\": \"IT14T0760101600000007957730\",\n                                \"relatedName\": \"DR. WHO\",\n                                \"timestamp\": \"02/05/2020 14:28:44\"\n                            },\n                            {\n                                \"serialNum\": \"5\",\n                                \"date\": \"2020-02-05T12:28:44.3579786Z\",\n                                \"branch\": \"700\",\n                                \"trans\": \"24\",\n                                \"transDescription\": null,\n                                \"amount\": -1,\n                                \"currency\": \"070\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Debit\",\n                                \"valeur\": \"2020-02-05T12:28:44.3579786Z\",\n                                \"description\": \"Transfer commission to IT14T0760101600000007957730\",\n                                \"accountingBalance\": 500000,\n                                \"reference\": \"ΠΡΟΜ.77148764243232803409\",\n                                \"externalSystem\": null,\n                                \"relatedAccount\": \"IT14T0760101600000007957730\",\n                                \"relatedName\": \"DR. WHO\",\n                                \"timestamp\": \"02/05/2020 14:28:44\"\n                            }\n                        ],\n                        \"deferred\": [\n                            {\n                                \"trnNo\": \"1\",\n                                \"trnId\": null,\n                                \"name\": \"NAME\",\n                                \"description\": \"TEST\",\n                                \"createdDate\": \"2020-02-06T12:28:44.361964Z\",\n                                \"executionDate\": \"2020-02-10T12:28:44.361964Z\",\n                                \"cancellationDate\": null,\n                                \"frequency\": 1,\n                                \"totalPayments\": 1,\n                                \"amount\": 1,\n                                \"status\": \"pending\",\n                                \"transId\": \"12345678909876543211\",\n                                \"channel\": null,\n                                \"rowsNum\": 1,\n                                \"debitAccount\": \"GR5301106780000067890123456\",\n                                \"totalAmount\": 1,\n                                \"creditAccount\": \"GR9601106780000067890123458\",\n                                \"details\": null,\n                                \"historical\": null,\n                                \"history\": null,\n                                \"future\": null,\n                                \"master\": null\n                            },\n                            {\n                                \"trnNo\": \"2\",\n                                \"trnId\": null,\n                                \"name\": \"NAME\",\n                                \"description\": \"TEST\",\n                                \"createdDate\": \"2020-02-06T12:28:44.361964Z\",\n                                \"executionDate\": \"2020-02-10T12:28:44.361964Z\",\n                                \"cancellationDate\": null,\n                                \"frequency\": 2,\n                                \"totalPayments\": 2,\n                                \"amount\": 2,\n                                \"status\": null,\n                                \"transId\": \"12345678909876543212\",\n                                \"channel\": null,\n                                \"rowsNum\": 1,\n                                \"debitAccount\": \"GR5301106780000067890123456\",\n                                \"totalAmount\": 2,\n                                \"creditAccount\": \"GR9601106780000067890123458\",\n                                \"details\": null,\n                                \"historical\": null,\n                                \"history\": null,\n                                \"future\": null,\n                                \"master\": null\n                            },\n                            {\n                                \"trnNo\": \"3\",\n                                \"trnId\": null,\n                                \"name\": \"NAME\",\n                                \"description\": \"TEST\",\n                                \"createdDate\": \"2020-02-06T12:28:44.361964Z\",\n                                \"executionDate\": \"2020-02-07T12:28:44.361964Z\",\n                                \"cancellationDate\": null,\n                                \"frequency\": 1,\n                                \"totalPayments\": 4,\n                                \"amount\": 20,\n                                \"status\": null,\n                                \"transId\": \"12345678909876543215\",\n                                \"channel\": null,\n                                \"rowsNum\": 1,\n                                \"debitAccount\": \"GR5301106780000067890123456\",\n                                \"totalAmount\": 20,\n                                \"creditAccount\": \"GR9601106780000067890123458\",\n                                \"details\": null,\n                                \"historical\": null,\n                                \"history\": null,\n                                \"future\": null,\n                                \"master\": null\n                            }\n                        ],\n                        \"pending\": [],\n                        \"beneficiaries\": [\n                            {\n                                \"name\": \"ΠΑΠΑΔΟΠΟΥΛΟΣ ΓΕΩΡΓΙΟΣ\",\n                                \"order\": \"1\"\n                            },\n                            {\n                                \"name\": \"ΠΑΠΠΑΣ ΝΙΚΟΛΑΟΣ\",\n                                \"order\": \"2\"\n                            }\n                        ],\n                        \"details\": {\n                            \"account\": \"67890123456\",\n                            \"iban\": \"GR5301106780000067890123456\",\n                            \"accountType\": \"3000\",\n                            \"currency\": \"EUR\",\n                            \"alias\": \"Account 1\",\n                            \"product\": null,\n                            \"ledgerBalance\": 500000,\n                            \"availableBalance\": 500000,\n                            \"createDate\": \"2020-02-05T12:28:44.356979Z\",\n                            \"lastTransactionDate\": \"2020-02-05T12:28:44.356979Z\",\n                            \"interestRate\": 0,\n                            \"interestAccrued\": 0,\n                            \"interestPeriod\": \"0\",\n                            \"chequeReservation\": 0,\n                            \"deptReservation\": 0,\n                            \"overdraftLimit\": -1000,\n                            \"excessLimitAmount\": 0,\n                            \"availableLimitAmount\": 0,\n                            \"freeChequeAmnt\": 0,\n                            \"expirationDate\": \"2020-02-05T12:28:44.356979Z\",\n                            \"interestScale\": \"1000\",\n                            \"irisAccount\": null,\n                            \"irisBalance\": 0,\n                            \"accType\": null,\n                            \"allowConnect\": \"1\",\n                            \"allowDebit\": \"1\",\n                            \"allowCredit\": \"11\",\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": {\n                                \"statement\": true,\n                                \"otherInfo\": true,\n                                \"mandates\": true,\n                                \"cheques\": true,\n                                \"transfer\": true,\n                                \"rates\": true,\n                                \"beneficiaries\": true\n                            },\n                            \"newMoneyBalance\": 0,\n                            \"mandatesNumber\": null\n                        },\n                        \"rates\": [\n                            {\n                                \"from\": 0,\n                                \"to\": 100000,\n                                \"rate\": 0.03\n                            }\n                        ]\n                    },\n                    {\n                        \"account\": {\n                            \"accountType\": \"20\",\n                            \"overdraftLimit\": null,\n                            \"numberOfMandates\": null,\n                            \"serialNo\": null,\n                            \"account\": \"67890123458\",\n                            \"iban\": \"GR9601106780000067890123458\",\n                            \"currency\": \"EUR\",\n                            \"alias\": \"Account 2\",\n                            \"product\": null,\n                            \"ledgerBalance\": 500000,\n                            \"availableBalance\": 500000,\n                            \"newMoneyBalance\": 0,\n                            \"flag\": null,\n                            \"allowConnect\": null,\n                            \"allowDebit\": null,\n                            \"allowCredit\": null,\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": null\n                        },\n                        \"transactions\": [],\n                        \"deferred\": [\n                            {\n                                \"trnNo\": \"1\",\n                                \"trnId\": null,\n                                \"name\": \"NAME\",\n                                \"description\": \"TEST\",\n                                \"createdDate\": \"2020-02-06T12:28:44.361964Z\",\n                                \"executionDate\": \"2020-02-10T12:28:44.361964Z\",\n                                \"cancellationDate\": null,\n                                \"frequency\": 1,\n                                \"totalPayments\": 1,\n                                \"amount\": 1,\n                                \"status\": \"pending\",\n                                \"transId\": \"12345678909876543213\",\n                                \"channel\": null,\n                                \"rowsNum\": 1,\n                                \"debitAccount\": \"GR9601106780000067890123458\",\n                                \"totalAmount\": 1,\n                                \"creditAccount\": \"GR5301106780000067890123456\",\n                                \"details\": null,\n                                \"historical\": null,\n                                \"history\": null,\n                                \"future\": null,\n                                \"master\": null\n                            },\n                            {\n                                \"trnNo\": \"2\",\n                                \"trnId\": null,\n                                \"name\": \"NAME\",\n                                \"description\": \"TEST\",\n                                \"createdDate\": \"2020-02-06T12:28:44.361964Z\",\n                                \"executionDate\": \"2020-02-10T12:28:44.361964Z\",\n                                \"cancellationDate\": null,\n                                \"frequency\": 2,\n                                \"totalPayments\": 2,\n                                \"amount\": 2,\n                                \"status\": null,\n                                \"transId\": \"12345678909876543214\",\n                                \"channel\": null,\n                                \"rowsNum\": 1,\n                                \"debitAccount\": \"GR9601106780000067890123458\",\n                                \"totalAmount\": 2,\n                                \"creditAccount\": \"GR5301106780000067890123456\",\n                                \"details\": null,\n                                \"historical\": null,\n                                \"history\": null,\n                                \"future\": null,\n                                \"master\": null\n                            }\n                        ],\n                        \"pending\": [],\n                        \"beneficiaries\": [\n                            {\n                                \"name\": \"ΒΑΣΙΛΕΙΟΥ ΜΑΡΙΑ\",\n                                \"order\": \"1\"\n                            }\n                        ],\n                        \"details\": {\n                            \"account\": \"67890123458\",\n                            \"iban\": \"GR9601106780000067890123458\",\n                            \"accountType\": \"20\",\n                            \"currency\": \"EUR\",\n                            \"alias\": \"Account 2\",\n                            \"product\": null,\n                            \"ledgerBalance\": 500000,\n                            \"availableBalance\": 500000,\n                            \"createDate\": \"2020-02-05T12:28:44.3579786Z\",\n                            \"lastTransactionDate\": \"2020-02-05T12:28:44.3579786Z\",\n                            \"interestRate\": 0,\n                            \"interestAccrued\": 0,\n                            \"interestPeriod\": \"0\",\n                            \"chequeReservation\": 0,\n                            \"deptReservation\": 0,\n                            \"overdraftLimit\": 0,\n                            \"excessLimitAmount\": 0,\n                            \"availableLimitAmount\": 0,\n                            \"freeChequeAmnt\": 0,\n                            \"expirationDate\": \"2020-02-05T12:28:44.3579786Z\",\n                            \"interestScale\": \"1000\",\n                            \"irisAccount\": null,\n                            \"irisBalance\": 0,\n                            \"accType\": null,\n                            \"allowConnect\": \"1\",\n                            \"allowDebit\": \"1\",\n                            \"allowCredit\": \"11\",\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": {\n                                \"statement\": true,\n                                \"otherInfo\": true,\n                                \"mandates\": true,\n                                \"cheques\": true,\n                                \"transfer\": true,\n                                \"rates\": true,\n                                \"beneficiaries\": true\n                            },\n                            \"newMoneyBalance\": 0,\n                            \"mandatesNumber\": null\n                        },\n                        \"rates\": []\n                    },\n                    {\n                        \"account\": {\n                            \"accountType\": \"3000\",\n                            \"overdraftLimit\": null,\n                            \"numberOfMandates\": null,\n                            \"serialNo\": null,\n                            \"account\": \"12332112332\",\n                            \"iban\": \"GR9601106780000012332112332\",\n                            \"currency\": \"USD\",\n                            \"alias\": \"Account 3\",\n                            \"product\": null,\n                            \"ledgerBalance\": 500000,\n                            \"availableBalance\": 500000,\n                            \"newMoneyBalance\": 0,\n                            \"flag\": null,\n                            \"allowConnect\": null,\n                            \"allowDebit\": null,\n                            \"allowCredit\": null,\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": null\n                        },\n                        \"transactions\": [\n                            {\n                                \"serialNum\": \"1\",\n                                \"date\": \"2020-02-05T12:28:44.3589785Z\",\n                                \"branch\": null,\n                                \"trans\": \"20\",\n                                \"transDescription\": null,\n                                \"amount\": -25,\n                                \"currency\": \"002\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Debit\",\n                                \"valeur\": \"2020-02-05T12:28:44.3589785Z\",\n                                \"description\": \"Check deposit Federer\",\n                                \"accountingBalance\": 500000,\n                                \"reference\": \"12345678901234567880\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR9601106780000012332112332\",\n                                \"relatedName\": \"ΓΕΩΡΓΙΟΥ ΓΙΩΡΓΟΣ\",\n                                \"timestamp\": null\n                            },\n                            {\n                                \"serialNum\": \"2\",\n                                \"date\": \"2020-02-04T12:28:44.3589785Z\",\n                                \"branch\": null,\n                                \"trans\": \"64\",\n                                \"transDescription\": null,\n                                \"amount\": 450.86,\n                                \"currency\": \"002\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Credit\",\n                                \"valeur\": \"2020-02-04T12:28:44.3589785Z\",\n                                \"description\": \"Fund Transfer 1\",\n                                \"accountingBalance\": 499549.14,\n                                \"reference\": \"12345678901234567881\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR9601106780000012332112332\",\n                                \"relatedName\": \"ΓΕΩΡΓΙΟΥ ΓΙΩΡΓΟΣ\",\n                                \"timestamp\": null\n                            },\n                            {\n                                \"serialNum\": \"3\",\n                                \"date\": \"2020-02-03T12:28:44.3589785Z\",\n                                \"branch\": null,\n                                \"trans\": \"64\",\n                                \"transDescription\": null,\n                                \"amount\": 400.86,\n                                \"currency\": \"002\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Credit\",\n                                \"valeur\": \"2020-02-03T12:28:44.3589785Z\",\n                                \"description\": \"Fund Transfer 2\",\n                                \"accountingBalance\": 499599.14,\n                                \"reference\": \"12345678901234567882\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR9601106780000012332112332\",\n                                \"relatedName\": \"ΓΕΩΡΓΙΟΥ ΓΙΩΡΓΟΣ\",\n                                \"timestamp\": null\n                            }\n                        ],\n                        \"deferred\": [],\n                        \"pending\": [],\n                        \"beneficiaries\": [\n                            {\n                                \"name\": \"ΓΕΩΡΓΙΟΥ ΓΙΩΡΓΟΣ\",\n                                \"order\": \"1\"\n                            }\n                        ],\n                        \"details\": {\n                            \"account\": \"12332112332\",\n                            \"iban\": \"GR9601106780000012332112332\",\n                            \"accountType\": \"3000\",\n                            \"currency\": \"USD\",\n                            \"alias\": \"Account 3\",\n                            \"product\": null,\n                            \"ledgerBalance\": 500000,\n                            \"availableBalance\": 500000,\n                            \"createDate\": \"2020-02-05T12:28:44.3589785Z\",\n                            \"lastTransactionDate\": \"2020-02-05T12:28:44.3589785Z\",\n                            \"interestRate\": 0,\n                            \"interestAccrued\": 0,\n                            \"interestPeriod\": \"0\",\n                            \"chequeReservation\": 0,\n                            \"deptReservation\": 0,\n                            \"overdraftLimit\": 0,\n                            \"excessLimitAmount\": 0,\n                            \"availableLimitAmount\": 0,\n                            \"freeChequeAmnt\": 0,\n                            \"expirationDate\": \"2020-02-05T12:28:44.3589785Z\",\n                            \"interestScale\": \"1000\",\n                            \"irisAccount\": null,\n                            \"irisBalance\": 0,\n                            \"accType\": null,\n                            \"allowConnect\": \"1\",\n                            \"allowDebit\": \"1\",\n                            \"allowCredit\": \"11\",\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": {\n                                \"statement\": true,\n                                \"otherInfo\": true,\n                                \"mandates\": true,\n                                \"cheques\": true,\n                                \"transfer\": true,\n                                \"rates\": true,\n                                \"beneficiaries\": true\n                            },\n                            \"newMoneyBalance\": 0,\n                            \"mandatesNumber\": null\n                        },\n                        \"rates\": [\n                            {\n                                \"from\": 0,\n                                \"to\": 100000,\n                                \"rate\": 0.03\n                            }\n                        ]\n                    }\n                ],\n                \"userId\": \"{{user_id}}\",\n                \"cards\": [\n                    {\n                        \"transactions\": [],\n                        \"card\": {\n                            \"creditLimit\": 0,\n                            \"ledgerBalance\": 0,\n                            \"expirationDate\": \"05/2025\",\n                            \"futureDueAmount\": 0,\n                            \"minimumPayment\": 0,\n                            \"paymentDate\": \"2020-02-15T12:28:44.3599779Z\",\n                            \"statementAmount\": 0,\n                            \"statementDate\": null,\n                            \"statementDeliver\": null,\n                            \"statementAddress\": null,\n                            \"statementAddressCity\": null,\n                            \"statementEmail\": null,\n                            \"currency\": null,\n                            \"status\": \"1\",\n                            \"delayDate\": null,\n                            \"delayAmount\": null,\n                            \"limitATM\": 0,\n                            \"limitPOS\": 50,\n                            \"limitINT\": 0,\n                            \"alias\": \"My prepaid credit card\",\n                            \"number\": \"4917910000000001\",\n                            \"productName\": \"VISA PREPAID\",\n                            \"type\": \"PCV\",\n                            \"creditBalance\": 1500,\n                            \"features\": {\n                                \"hasAlerts\": true,\n                                \"quickCredit\": {\n                                    \"supportsQuickCredit\": true,\n                                    \"canBeInactive\": false,\n                                    \"hasCommission\": false,\n                                    \"isDeferred\": true,\n                                    \"isAmountRetreived\": true,\n                                    \"accountCurrency\": null\n                                },\n                                \"supportsQuickDebit\": false,\n                                \"hasOtherInfo\": true,\n                                \"hasLimitSet\": false,\n                                \"canBeCanceled\": false,\n                                \"hasAccounts\": false,\n                                \"canBeUpdated\": false\n                            },\n                            \"issuedBy\": null,\n                            \"kind\": null,\n                            \"color\": null,\n                            \"microtagType\": null\n                        }\n                    },\n                    {\n                        \"transactions\": [\n                            {\n                                \"serialNum\": \"1\",\n                                \"tranDate\": \"2020-02-05T12:28:44.3609636Z\",\n                                \"transactionDateTime\": \"2020-02-05T12:28:44.3609636Z\",\n                                \"reasonText\": \"Subscription renewal\",\n                                \"creditDebitFlag\": \"Credit\",\n                                \"amount\": 120,\n                                \"cardNumber\": \"5278900000000001\",\n                                \"ledgerBalance\": 2500\n                            }\n                        ],\n                        \"card\": {\n                            \"creditLimit\": 5000,\n                            \"ledgerBalance\": 3400,\n                            \"expirationDate\": \"01/2025\",\n                            \"futureDueAmount\": 113.5,\n                            \"minimumPayment\": 65,\n                            \"paymentDate\": \"2020-02-06T12:28:44.3599779Z\",\n                            \"statementAmount\": 3342,\n                            \"statementDate\": \"2020-02-05T12:28:44.3599779Z\",\n                            \"statementDeliver\": null,\n                            \"statementAddress\": null,\n                            \"statementAddressCity\": null,\n                            \"statementEmail\": null,\n                            \"currency\": null,\n                            \"status\": \"1\",\n                            \"delayDate\": null,\n                            \"delayAmount\": null,\n                            \"limitATM\": 0,\n                            \"limitPOS\": 0,\n                            \"limitINT\": 0,\n                            \"alias\": \"My credit card\",\n                            \"number\": \"5278900000000001\",\n                            \"productName\": \"GOLD MASTERCARD\",\n                            \"type\": \"CC\",\n                            \"creditBalance\": 1000,\n                            \"features\": {\n                                \"hasAlerts\": true,\n                                \"quickCredit\": {\n                                    \"supportsQuickCredit\": true,\n                                    \"canBeInactive\": false,\n                                    \"hasCommission\": false,\n                                    \"isDeferred\": true,\n                                    \"isAmountRetreived\": true,\n                                    \"accountCurrency\": null\n                                },\n                                \"supportsQuickDebit\": false,\n                                \"hasOtherInfo\": true,\n                                \"hasLimitSet\": false,\n                                \"canBeCanceled\": false,\n                                \"hasAccounts\": false,\n                                \"canBeUpdated\": false\n                            },\n                            \"issuedBy\": null,\n                            \"kind\": null,\n                            \"color\": null,\n                            \"microtagType\": null\n                        }\n                    },\n                    {\n                        \"transactions\": [],\n                        \"card\": {\n                            \"limitATM\": 100,\n                            \"limitPOS\": 50,\n                            \"limitINT\": 0,\n                            \"status\": \"1\",\n                            \"statusTimestamp\": \"0001-01-01T00:00:00Z\",\n                            \"statusDescription\": null,\n                            \"productCode\": null,\n                            \"issueDate\": \"0001-01-01T00:00:00Z\",\n                            \"expirationDate\": \"01/2024\",\n                            \"ownerBranch\": null,\n                            \"technologyType\": null,\n                            \"pvvNum\": null,\n                            \"holder\": \"A.B C\",\n                            \"iLoc\": 0,\n                            \"commissionDate\": \"0001-01-01T00:00:00Z\",\n                            \"refresh\": null,\n                            \"lastATMTransactionTimestamp\": \"0001-01-01T00:00:00Z\",\n                            \"lastBranchTransactionTimestamp\": \"0001-01-01T00:00:00Z\",\n                            \"limits\": {\n                                \"domesticWithdrawalLimit\": 900,\n                                \"internationalWithdrawalLimit\": 900,\n                                \"totalWithdrawalLimit\": 1500,\n                                \"domesticEcommerceLimit\": 1500,\n                                \"internationalEcommerceLimit\": 1500,\n                                \"totalEcommerceLimit\": 1500,\n                                \"purchaseLimit\": 1500,\n                                \"creditLimit\": null\n                            },\n                            \"connectedAccounts\": [\n                                {\n                                    \"accountNumber\": \"67890123456\",\n                                    \"iban\": \"GR5301106780000067890123456\",\n                                    \"accountDescription\": \"3000\"\n                                }\n                            ],\n                            \"alias\": \"My debit card\",\n                            \"number\": \"4589120000000001\",\n                            \"productName\": \"VISA DEBIT\",\n                            \"type\": \"DC\",\n                            \"creditBalance\": 0,\n                            \"features\": {\n                                \"hasAlerts\": false,\n                                \"quickCredit\": {\n                                    \"supportsQuickCredit\": false,\n                                    \"canBeInactive\": false,\n                                    \"hasCommission\": false,\n                                    \"isDeferred\": false,\n                                    \"isAmountRetreived\": false,\n                                    \"accountCurrency\": null\n                                },\n                                \"supportsQuickDebit\": true,\n                                \"hasOtherInfo\": false,\n                                \"hasLimitSet\": false,\n                                \"canBeCanceled\": false,\n                                \"hasAccounts\": true,\n                                \"canBeUpdated\": true\n                            },\n                            \"issuedBy\": null,\n                            \"kind\": null,\n                            \"color\": null,\n                            \"microtagType\": null\n                        }\n                    }\n                ],\n                \"mobilePhoneNumber\": \"1234567890\"\n            },\n            {\n                \"accounts\": [\n                    {\n                        \"account\": {\n                            \"accountType\": \"3000\",\n                            \"overdraftLimit\": -1000,\n                            \"numberOfMandates\": null,\n                            \"serialNo\": null,\n                            \"account\": \"67890123456\",\n                            \"iban\": \"GR5301106780000067890123456\",\n                            \"currency\": \"EUR\",\n                            \"alias\": \"Account 1\",\n                            \"product\": null,\n                            \"ledgerBalance\": 500000,\n                            \"availableBalance\": 500000,\n                            \"newMoneyBalance\": 0,\n                            \"flag\": null,\n                            \"allowConnect\": null,\n                            \"allowDebit\": null,\n                            \"allowCredit\": null,\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": null\n                        },\n                        \"transactions\": [\n                            {\n                                \"serialNum\": \"1\",\n                                \"date\": \"2020-02-05T12:28:44.3579786Z\",\n                                \"branch\": null,\n                                \"trans\": \"20\",\n                                \"transDescription\": null,\n                                \"amount\": -25,\n                                \"currency\": \"070\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Debit\",\n                                \"valeur\": \"2020-02-05T12:28:44.3579786Z\",\n                                \"description\": \"Check deposit Federer\",\n                                \"accountingBalance\": 500000,\n                                \"reference\": \"12345678901234567890\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR5301106780000067890123456\",\n                                \"relatedName\": \"ΠΑΠΑΔΟΠΟΥΛΟΣ ΓΕΩΡΓΙΟΣ\",\n                                \"timestamp\": null\n                            },\n                            {\n                                \"serialNum\": \"2\",\n                                \"date\": \"2020-02-04T12:28:44.3579786Z\",\n                                \"branch\": null,\n                                \"trans\": \"64\",\n                                \"transDescription\": null,\n                                \"amount\": 450.86,\n                                \"currency\": \"070\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Credit\",\n                                \"valeur\": \"2020-02-04T12:28:44.3579786Z\",\n                                \"description\": \"Fund Transfer 1\",\n                                \"accountingBalance\": 499549.14,\n                                \"reference\": \"12345678901234567891\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR5301106780000067890123456\",\n                                \"relatedName\": \"ΠΑΠΑΔΟΠΟΥΛΟΣ ΓΕΩΡΓΙΟΣ\",\n                                \"timestamp\": null\n                            },\n                            {\n                                \"serialNum\": \"3\",\n                                \"date\": \"2020-02-03T12:28:44.3579786Z\",\n                                \"branch\": null,\n                                \"trans\": \"64\",\n                                \"transDescription\": null,\n                                \"amount\": 400.86,\n                                \"currency\": \"070\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Credit\",\n                                \"valeur\": \"2020-02-03T12:28:44.3579786Z\",\n                                \"description\": \"Fund Transfer 2\",\n                                \"accountingBalance\": 499599.14,\n                                \"reference\": \"12345678901234567892\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR5301106780000067890123456\",\n                                \"relatedName\": \"ΠΑΠΑΔΟΠΟΥΛΟΣ ΓΕΩΡΓΙΟΣ\",\n                                \"timestamp\": null\n                            },\n                            {\n                                \"serialNum\": \"4\",\n                                \"date\": \"2020-02-05T12:28:44.3579786Z\",\n                                \"branch\": \"700\",\n                                \"trans\": \"68\",\n                                \"transDescription\": null,\n                                \"amount\": -100,\n                                \"currency\": \"070\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Debit\",\n                                \"valeur\": \"2020-02-05T12:28:44.3579786Z\",\n                                \"description\": \"SEPA TRANSFER\",\n                                \"accountingBalance\": 500000,\n                                \"reference\": \"77148764243232803409\",\n                                \"externalSystem\": \"ROT\",\n                                \"relatedAccount\": \"IT14T0760101600000007957730\",\n                                \"relatedName\": \"DR. WHO\",\n                                \"timestamp\": \"02/05/2020 14:28:44\"\n                            },\n                            {\n                                \"serialNum\": \"5\",\n                                \"date\": \"2020-02-05T12:28:44.3579786Z\",\n                                \"branch\": \"700\",\n                                \"trans\": \"24\",\n                                \"transDescription\": null,\n                                \"amount\": -1,\n                                \"currency\": \"070\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Debit\",\n                                \"valeur\": \"2020-02-05T12:28:44.3579786Z\",\n                                \"description\": \"Transfer commission to IT14T0760101600000007957730\",\n                                \"accountingBalance\": 500000,\n                                \"reference\": \"ΠΡΟΜ.77148764243232803409\",\n                                \"externalSystem\": null,\n                                \"relatedAccount\": \"IT14T0760101600000007957730\",\n                                \"relatedName\": \"DR. WHO\",\n                                \"timestamp\": \"02/05/2020 14:28:44\"\n                            }\n                        ],\n                        \"deferred\": [\n                            {\n                                \"trnNo\": \"1\",\n                                \"trnId\": null,\n                                \"name\": \"NAME\",\n                                \"description\": \"TEST\",\n                                \"createdDate\": \"2020-02-06T12:28:44.361964Z\",\n                                \"executionDate\": \"2020-02-10T12:28:44.361964Z\",\n                                \"cancellationDate\": null,\n                                \"frequency\": 1,\n                                \"totalPayments\": 1,\n                                \"amount\": 1,\n                                \"status\": \"pending\",\n                                \"transId\": \"12345678909876543211\",\n                                \"channel\": null,\n                                \"rowsNum\": 1,\n                                \"debitAccount\": \"GR5301106780000067890123456\",\n                                \"totalAmount\": 1,\n                                \"creditAccount\": \"GR9601106780000067890123458\",\n                                \"details\": null,\n                                \"historical\": null,\n                                \"history\": null,\n                                \"future\": null,\n                                \"master\": null\n                            },\n                            {\n                                \"trnNo\": \"2\",\n                                \"trnId\": null,\n                                \"name\": \"NAME\",\n                                \"description\": \"TEST\",\n                                \"createdDate\": \"2020-02-06T12:28:44.361964Z\",\n                                \"executionDate\": \"2020-02-10T12:28:44.361964Z\",\n                                \"cancellationDate\": null,\n                                \"frequency\": 2,\n                                \"totalPayments\": 2,\n                                \"amount\": 2,\n                                \"status\": null,\n                                \"transId\": \"12345678909876543212\",\n                                \"channel\": null,\n                                \"rowsNum\": 1,\n                                \"debitAccount\": \"GR5301106780000067890123456\",\n                                \"totalAmount\": 2,\n                                \"creditAccount\": \"GR9601106780000067890123458\",\n                                \"details\": null,\n                                \"historical\": null,\n                                \"history\": null,\n                                \"future\": null,\n                                \"master\": null\n                            },\n                            {\n                                \"trnNo\": \"3\",\n                                \"trnId\": null,\n                                \"name\": \"NAME\",\n                                \"description\": \"TEST\",\n                                \"createdDate\": \"2020-02-06T12:28:44.361964Z\",\n                                \"executionDate\": \"2020-02-07T12:28:44.361964Z\",\n                                \"cancellationDate\": null,\n                                \"frequency\": 1,\n                                \"totalPayments\": 4,\n                                \"amount\": 20,\n                                \"status\": null,\n                                \"transId\": \"12345678909876543215\",\n                                \"channel\": null,\n                                \"rowsNum\": 1,\n                                \"debitAccount\": \"GR5301106780000067890123456\",\n                                \"totalAmount\": 20,\n                                \"creditAccount\": \"GR9601106780000067890123458\",\n                                \"details\": null,\n                                \"historical\": null,\n                                \"history\": null,\n                                \"future\": null,\n                                \"master\": null\n                            }\n                        ],\n                        \"pending\": [],\n                        \"beneficiaries\": [\n                            {\n                                \"name\": \"ΠΑΠΑΔΟΠΟΥΛΟΣ ΓΕΩΡΓΙΟΣ\",\n                                \"order\": \"1\"\n                            },\n                            {\n                                \"name\": \"ΠΑΠΠΑΣ ΝΙΚΟΛΑΟΣ\",\n                                \"order\": \"2\"\n                            }\n                        ],\n                        \"details\": {\n                            \"account\": \"67890123456\",\n                            \"iban\": \"GR5301106780000067890123456\",\n                            \"accountType\": \"3000\",\n                            \"currency\": \"EUR\",\n                            \"alias\": \"Account 1\",\n                            \"product\": null,\n                            \"ledgerBalance\": 500000,\n                            \"availableBalance\": 500000,\n                            \"createDate\": \"2020-02-05T12:28:44.356979Z\",\n                            \"lastTransactionDate\": \"2020-02-05T12:28:44.356979Z\",\n                            \"interestRate\": 0,\n                            \"interestAccrued\": 0,\n                            \"interestPeriod\": \"0\",\n                            \"chequeReservation\": 0,\n                            \"deptReservation\": 0,\n                            \"overdraftLimit\": -1000,\n                            \"excessLimitAmount\": 0,\n                            \"availableLimitAmount\": 0,\n                            \"freeChequeAmnt\": 0,\n                            \"expirationDate\": \"2020-02-05T12:28:44.356979Z\",\n                            \"interestScale\": \"1000\",\n                            \"irisAccount\": null,\n                            \"irisBalance\": 0,\n                            \"accType\": null,\n                            \"allowConnect\": \"1\",\n                            \"allowDebit\": \"1\",\n                            \"allowCredit\": \"11\",\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": {\n                                \"statement\": true,\n                                \"otherInfo\": true,\n                                \"mandates\": true,\n                                \"cheques\": true,\n                                \"transfer\": true,\n                                \"rates\": true,\n                                \"beneficiaries\": true\n                            },\n                            \"newMoneyBalance\": 0,\n                            \"mandatesNumber\": null\n                        },\n                        \"rates\": [\n                            {\n                                \"from\": 0,\n                                \"to\": 100000,\n                                \"rate\": 0.03\n                            }\n                        ]\n                    },\n                    {\n                        \"account\": {\n                            \"accountType\": \"20\",\n                            \"overdraftLimit\": null,\n                            \"numberOfMandates\": null,\n                            \"serialNo\": null,\n                            \"account\": \"67890123458\",\n                            \"iban\": \"GR9601106780000067890123458\",\n                            \"currency\": \"EUR\",\n                            \"alias\": \"Account 2\",\n                            \"product\": null,\n                            \"ledgerBalance\": 500000,\n                            \"availableBalance\": 500000,\n                            \"newMoneyBalance\": 0,\n                            \"flag\": null,\n                            \"allowConnect\": null,\n                            \"allowDebit\": null,\n                            \"allowCredit\": null,\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": null\n                        },\n                        \"transactions\": [],\n                        \"deferred\": [\n                            {\n                                \"trnNo\": \"1\",\n                                \"trnId\": null,\n                                \"name\": \"NAME\",\n                                \"description\": \"TEST\",\n                                \"createdDate\": \"2020-02-06T12:28:44.361964Z\",\n                                \"executionDate\": \"2020-02-10T12:28:44.361964Z\",\n                                \"cancellationDate\": null,\n                                \"frequency\": 1,\n                                \"totalPayments\": 1,\n                                \"amount\": 1,\n                                \"status\": \"pending\",\n                                \"transId\": \"12345678909876543213\",\n                                \"channel\": null,\n                                \"rowsNum\": 1,\n                                \"debitAccount\": \"GR9601106780000067890123458\",\n                                \"totalAmount\": 1,\n                                \"creditAccount\": \"GR5301106780000067890123456\",\n                                \"details\": null,\n                                \"historical\": null,\n                                \"history\": null,\n                                \"future\": null,\n                                \"master\": null\n                            },\n                            {\n                                \"trnNo\": \"2\",\n                                \"trnId\": null,\n                                \"name\": \"NAME\",\n                                \"description\": \"TEST\",\n                                \"createdDate\": \"2020-02-06T12:28:44.361964Z\",\n                                \"executionDate\": \"2020-02-10T12:28:44.361964Z\",\n                                \"cancellationDate\": null,\n                                \"frequency\": 2,\n                                \"totalPayments\": 2,\n                                \"amount\": 2,\n                                \"status\": null,\n                                \"transId\": \"12345678909876543214\",\n                                \"channel\": null,\n                                \"rowsNum\": 1,\n                                \"debitAccount\": \"GR9601106780000067890123458\",\n                                \"totalAmount\": 2,\n                                \"creditAccount\": \"GR5301106780000067890123456\",\n                                \"details\": null,\n                                \"historical\": null,\n                                \"history\": null,\n                                \"future\": null,\n                                \"master\": null\n                            }\n                        ],\n                        \"pending\": [],\n                        \"beneficiaries\": [\n                            {\n                                \"name\": \"ΒΑΣΙΛΕΙΟΥ ΜΑΡΙΑ\",\n                                \"order\": \"1\"\n                            }\n                        ],\n                        \"details\": {\n                            \"account\": \"67890123458\",\n                            \"iban\": \"GR9601106780000067890123458\",\n                            \"accountType\": \"20\",\n                            \"currency\": \"EUR\",\n                            \"alias\": \"Account 2\",\n                            \"product\": null,\n                            \"ledgerBalance\": 500000,\n                            \"availableBalance\": 500000,\n                            \"createDate\": \"2020-02-05T12:28:44.3579786Z\",\n                            \"lastTransactionDate\": \"2020-02-05T12:28:44.3579786Z\",\n                            \"interestRate\": 0,\n                            \"interestAccrued\": 0,\n                            \"interestPeriod\": \"0\",\n                            \"chequeReservation\": 0,\n                            \"deptReservation\": 0,\n                            \"overdraftLimit\": 0,\n                            \"excessLimitAmount\": 0,\n                            \"availableLimitAmount\": 0,\n                            \"freeChequeAmnt\": 0,\n                            \"expirationDate\": \"2020-02-05T12:28:44.3579786Z\",\n                            \"interestScale\": \"1000\",\n                            \"irisAccount\": null,\n                            \"irisBalance\": 0,\n                            \"accType\": null,\n                            \"allowConnect\": \"1\",\n                            \"allowDebit\": \"1\",\n                            \"allowCredit\": \"11\",\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": {\n                                \"statement\": true,\n                                \"otherInfo\": true,\n                                \"mandates\": true,\n                                \"cheques\": true,\n                                \"transfer\": true,\n                                \"rates\": true,\n                                \"beneficiaries\": true\n                            },\n                            \"newMoneyBalance\": 0,\n                            \"mandatesNumber\": null\n                        },\n                        \"rates\": []\n                    },\n                    {\n                        \"account\": {\n                            \"accountType\": \"3000\",\n                            \"overdraftLimit\": null,\n                            \"numberOfMandates\": null,\n                            \"serialNo\": null,\n                            \"account\": \"12332112332\",\n                            \"iban\": \"GR9601106780000012332112332\",\n                            \"currency\": \"USD\",\n                            \"alias\": \"Account 3\",\n                            \"product\": null,\n                            \"ledgerBalance\": 500000,\n                            \"availableBalance\": 500000,\n                            \"newMoneyBalance\": 0,\n                            \"flag\": null,\n                            \"allowConnect\": null,\n                            \"allowDebit\": null,\n                            \"allowCredit\": null,\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": null\n                        },\n                        \"transactions\": [\n                            {\n                                \"serialNum\": \"1\",\n                                \"date\": \"2020-02-05T12:28:44.3589785Z\",\n                                \"branch\": null,\n                                \"trans\": \"20\",\n                                \"transDescription\": null,\n                                \"amount\": -25,\n                                \"currency\": \"002\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Debit\",\n                                \"valeur\": \"2020-02-05T12:28:44.3589785Z\",\n                                \"description\": \"Check deposit Federer\",\n                                \"accountingBalance\": 500000,\n                                \"reference\": \"12345678901234567880\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR9601106780000012332112332\",\n                                \"relatedName\": \"ΓΕΩΡΓΙΟΥ ΓΙΩΡΓΟΣ\",\n                                \"timestamp\": null\n                            },\n                            {\n                                \"serialNum\": \"2\",\n                                \"date\": \"2020-02-04T12:28:44.3589785Z\",\n                                \"branch\": null,\n                                \"trans\": \"64\",\n                                \"transDescription\": null,\n                                \"amount\": 450.86,\n                                \"currency\": \"002\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Credit\",\n                                \"valeur\": \"2020-02-04T12:28:44.3589785Z\",\n                                \"description\": \"Fund Transfer 1\",\n                                \"accountingBalance\": 499549.14,\n                                \"reference\": \"12345678901234567881\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR9601106780000012332112332\",\n                                \"relatedName\": \"ΓΕΩΡΓΙΟΥ ΓΙΩΡΓΟΣ\",\n                                \"timestamp\": null\n                            },\n                            {\n                                \"serialNum\": \"3\",\n                                \"date\": \"2020-02-03T12:28:44.3589785Z\",\n                                \"branch\": null,\n                                \"trans\": \"64\",\n                                \"transDescription\": null,\n                                \"amount\": 400.86,\n                                \"currency\": \"002\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Credit\",\n                                \"valeur\": \"2020-02-03T12:28:44.3589785Z\",\n                                \"description\": \"Fund Transfer 2\",\n                                \"accountingBalance\": 499599.14,\n                                \"reference\": \"12345678901234567882\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR9601106780000012332112332\",\n                                \"relatedName\": \"ΓΕΩΡΓΙΟΥ ΓΙΩΡΓΟΣ\",\n                                \"timestamp\": null\n                            }\n                        ],\n                        \"deferred\": [],\n                        \"pending\": [],\n                        \"beneficiaries\": [\n                            {\n                                \"name\": \"ΓΕΩΡΓΙΟΥ ΓΙΩΡΓΟΣ\",\n                                \"order\": \"1\"\n                            }\n                        ],\n                        \"details\": {\n                            \"account\": \"12332112332\",\n                            \"iban\": \"GR9601106780000012332112332\",\n                            \"accountType\": \"3000\",\n                            \"currency\": \"USD\",\n                            \"alias\": \"Account 3\",\n                            \"product\": null,\n                            \"ledgerBalance\": 500000,\n                            \"availableBalance\": 500000,\n                            \"createDate\": \"2020-02-05T12:28:44.3589785Z\",\n                            \"lastTransactionDate\": \"2020-02-05T12:28:44.3589785Z\",\n                            \"interestRate\": 0,\n                            \"interestAccrued\": 0,\n                            \"interestPeriod\": \"0\",\n                            \"chequeReservation\": 0,\n                            \"deptReservation\": 0,\n                            \"overdraftLimit\": 0,\n                            \"excessLimitAmount\": 0,\n                            \"availableLimitAmount\": 0,\n                            \"freeChequeAmnt\": 0,\n                            \"expirationDate\": \"2020-02-05T12:28:44.3589785Z\",\n                            \"interestScale\": \"1000\",\n                            \"irisAccount\": null,\n                            \"irisBalance\": 0,\n                            \"accType\": null,\n                            \"allowConnect\": \"1\",\n                            \"allowDebit\": \"1\",\n                            \"allowCredit\": \"11\",\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": {\n                                \"statement\": true,\n                                \"otherInfo\": true,\n                                \"mandates\": true,\n                                \"cheques\": true,\n                                \"transfer\": true,\n                                \"rates\": true,\n                                \"beneficiaries\": true\n                            },\n                            \"newMoneyBalance\": 0,\n                            \"mandatesNumber\": null\n                        },\n                        \"rates\": [\n                            {\n                                \"from\": 0,\n                                \"to\": 100000,\n                                \"rate\": 0.03\n                            }\n                        ]\n                    }\n                ],\n                \"userId\": \"CORPORATION\",\n                \"cards\": [],\n                \"mobilePhoneNumber\": \"\"\n            }\n        ],\n        \"consentApplicationIds\": [\n            \"72f01708-be1e-4567-926e-8c87d03ca551\"\n        ],\n        \"consents\": [\n            {\n                \"consentData\": {\n                    \"consentId\": \"c17e3559-06e9-4d42-9a3c-28523ea3df96\",\n                    \"permissions\": [\n                        {\n                            \"startDate\": \"2019-05-07T14:34:38.21221Z\",\n                            \"endDate\": \"2029-10-07T14:34:38.21221Z\",\n                            \"type\": \"Account\",\n                            \"typeInfo\": {\n                                \"name\": \"Account name\",\n                                \"iban\": \"GR5301106780000067890123456\",\n                                \"accountNumber\": \"\"\n                            },\n                            \"actions\": [\n                                \"view.account.info\"\n                            ]\n                        },\n                        {\n                            \"startDate\": \"2019-05-07T14:34:38.21221Z\",\n                            \"endDate\": \"2029-10-07T14:34:38.21221Z\",\n                            \"type\": \"Payments\",\n                            \"typeInfo\": {\n                                \"name\": \"Account name\",\n                                \"iban\": \"GR5301106780000067890123456\",\n                                \"accountNumber\": \"\"\n                            },\n                            \"actions\": [\n                                \"make.payments\"\n                            ]\n                        },\n                        {\n                            \"startDate\": \"2019-05-07T14:34:38.21221Z\",\n                            \"endDate\": \"2029-10-07T14:34:38.21221Z\",\n                            \"type\": \"Funds\",\n                            \"typeInfo\": {\n                                \"name\": \"Account name\",\n                                \"iban\": \"GR5301106780000067890123456\",\n                                \"accountNumber\": \"\"\n                            },\n                            \"actions\": [\n                                \"check.funds.availability\"\n                            ]\n                        },\n                        {\n                            \"startDate\": \"2019-05-07T14:34:38.21221Z\",\n                            \"endDate\": \"2029-10-07T14:34:38.21221Z\",\n                            \"type\": \"Account\",\n                            \"typeInfo\": {\n                                \"name\": \"Account name\",\n                                \"iban\": \"GR9601106780000012332112332\",\n                                \"accountNumber\": \"12332112332\"\n                            },\n                            \"actions\": [\n                                \"view.account.info\"\n                            ]\n                        },\n                        {\n                            \"startDate\": \"2019-05-07T14:34:38.21221Z\",\n                            \"endDate\": \"2029-10-07T14:34:38.21221Z\",\n                            \"type\": \"Payments\",\n                            \"typeInfo\": {\n                                \"name\": \"Account name\",\n                                \"iban\": \"GR9601106780000012332112332\",\n                                \"accountNumber\": \"12332112332\"\n                            },\n                            \"actions\": [\n                                \"make.payments\"\n                            ]\n                        },\n                        {\n                            \"startDate\": \"2019-05-07T14:34:38.21221Z\",\n                            \"endDate\": \"2029-10-07T14:34:38.21221Z\",\n                            \"type\": \"Funds\",\n                            \"typeInfo\": {\n                                \"name\": \"Account name\",\n                                \"iban\": \"GR9601106780000012332112332\",\n                                \"accountNumber\": \"12332112332\"\n                            },\n                            \"actions\": [\n                                \"check.funds.availability\"\n                            ]\n                        },\n                        {\n                            \"startDate\": \"2019-05-07T14:34:38.21221Z\",\n                            \"endDate\": \"2029-10-07T14:34:38.21221Z\",\n                            \"type\": \"Card\",\n                            \"typeInfo\": {\n                                \"name\": \"GOLD MASTERCARD\",\n                                \"iban\": \"5278900000000001\",\n                                \"accountNumber\": \"5278900000000001\"\n                            },\n                            \"actions\": [\n                                \"view.card.info\"\n                            ]\n                        },\n                        {\n                            \"startDate\": \"2019-05-07T14:34:38.21221Z\",\n                            \"endDate\": \"2029-10-07T14:34:38.21221Z\",\n                            \"type\": \"Card\",\n                            \"typeInfo\": {\n                                \"name\": \"VISA DEBIT\",\n                                \"iban\": \"4589120000000001\",\n                                \"accountNumber\": \"4589120000000001\"\n                            },\n                            \"actions\": [\n                                \"view.card.info\"\n                            ]\n                        }\n                    ]\n                },\n                \"consentId\": \"c17e3559-06e9-4d42-9a3c-28523ea3df96\",\n                \"name\": \"Consent name\",\n                \"startDate\": \"2019-05-07T14:34:38.21221Z\",\n                \"endDate\": \"2020-10-07T14:34:38.21221Z\",\n                \"created\": \"2020-02-05T12:28:57.4406203Z\",\n                \"updated\": \"2020-02-05T12:29:01.2650343Z\",\n                \"uses\": 0,\n                \"status\": \"Authorized\",\n                \"statusDate\": \"2020-02-05T12:29:01.2650343Z\",\n                \"applicationId\": \"72f01708-be1e-4567-926e-8c87d03ca551\",\n                \"sub\": \"f3f85078-1a8e-4924-9f13-7d2ebd2cdeb5\",\n                \"preferredUsername\": null,\n                \"providerId\": null\n            }\n        ]\n    },\n    \"exception\": null,\n    \"messages\": null,\n    \"executionTime\": 0\n}"
						},
						"url": {
							"raw": "{{root_url}}/sandbox/{{sandbox_id}}",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"sandbox",
								"{{sandbox_id}}"
							]
						},
						"description": "Import a sandbox"
					},
					"response": []
				},
				{
					"name": "Delete Sandbox",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Client-Id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "Request-Id",
								"value": "{{$guid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{root_url}}/sandbox/{{sandbox_id}}",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"sandbox",
								"{{sandbox_id}}"
							]
						},
						"description": "Delete a sandbox"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ae36cb81-e2ee-4fbe-a603-160faddc339b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4728e107-b6fd-4d80-8358-244dce10dc3c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Consent",
			"item": [
				{
					"name": "Generate consent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c432f91a-1be5-4381-9673-442089284fc6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "04fde41b-99bb-49d0-b855-6f487eca5bd3",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"Consent-Id\", jsonData.payload.consentId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "{{accept}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "sandbox_id",
								"value": "{{sandbox_id}}",
								"type": "text"
							},
							{
								"key": "Client-Id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "Request-Id",
								"value": "{{request_guid}}",
								"type": "text"
							},
							{
								"key": "X-Certificate-Check",
								"value": "{{X-Certificate-Check}}",
								"type": "text"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "{{TPP-Signature-Certificate}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{Signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{request_guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"applicationId\": \"{{consent_application_Id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/consents/request-access",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"consents",
								"request-access"
							]
						},
						"description": "Generates a consentId that must be used when the user visits the Consent UI to give his/her consent, using client credential authorisation flow."
					},
					"response": []
				},
				{
					"name": "Get consent information",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "32dc82d7-71b3-4265-816b-620772628df3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "873d45ed-cffe-4bcf-a052-12a2450ac105",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "{{accept}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "sandbox_id",
								"value": "{{sandbox_id}}",
								"type": "text"
							},
							{
								"key": "Client-Id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "Request-Id",
								"value": "{{request_guid}}",
								"type": "text"
							},
							{
								"key": "X-Certificate-Check",
								"value": "{{X-Certificate-Check}}",
								"type": "text"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "{{TPP-Signature-Certificate}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{Signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{request_guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"userId\": \"{{user_id}}\",\n        \"applicationId\": \"{{consent_application_Id}}\",\n        \"consentId\": \"{{Consent-Id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/consents/info",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"consents",
								"info"
							]
						},
						"description": "Retrieves the consent information of a user's consent."
					},
					"response": []
				},
				{
					"name": "Delete consent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "783cc610-ad17-4761-aad9-5b20bab85105",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "812e9d8a-7ad2-47e0-bdbc-21c968333e2f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "{{accept}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "sandbox_id",
								"value": "{{sandbox_id}}",
								"type": "text"
							},
							{
								"key": "Client-Id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "Request-Id",
								"value": "{{request_guid}}",
								"type": "text"
							},
							{
								"key": "X-Certificate-Check",
								"value": "{{X-Certificate-Check}}",
								"type": "text"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "{{TPP-Signature-Certificate}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{Signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{request_guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"tanNumber\": \"smsotp\",\n        \"userId\": \"{{user_id}}\",\n        \"consentId\": \"{{Consent-Id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/consents/delete",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"consents",
								"delete"
							]
						},
						"description": "Deletes a user's consent."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6adca9f2-dd5d-49b1-ad06-60a12ed2c655",
						"type": "text/javascript",
						"exec": [
							"{//loading private key",
							"console.log(\"Now private key must be placed in plain text base64 starting and ending with '-----' lines\");",
							"console.log(\"Additionally u can use KEYUTIL for safe key storage.\" );",
							"var privateKey = pm.environment.get(\"privatekey\");",
							"//loading public key  and addit to header ",
							"console.log(\" additionally u can use KEYUTIL for safe certificate storage now is in plain text\");",
							"var publicKey = pm.environment.get(\"publiccertificate\").replace('-----BEGIN CERTIFICATE-----','').replace('-----END CERTIFICATE-----','').replace(/(?:\\r\\n|\\r|\\n)/g, '');",
							"pm.environment.set(\"TPP-Signature-Certificate\", publicKey);",
							"var Property = require('postman-collection').Property;",
							"",
							"",
							"var runit =  function(){",
							"    //loading RSA JWT library",
							"    var navigator = {};",
							"    var window = {};",
							"    eval(postman.getGlobalVariable(\"RSAJS\"));",
							"    console.log(\" now u can use KJUR as a rsa library\");",
							"    ",
							"    //prepare head",
							"    var oHeader = {\"alg\" : \"RS256\",\"typ\" : \"JWT\"};",
							"    var sHeader = JSON.stringify(oHeader);",
							"    ",
							"    //prepare pody",
							"    //var oData = {dsa:\"dsa\"};",
							"    var oRaw = pm.request.body.raw ",
							"    var oData = JSON.parse(Property.replaceSubstitutions(pm.request.body.raw , pm.variables.toObject()));",
							"    ",
							"    var sPayload = JSON.stringify(oData);",
							"    //var sPayload = pm.request.body.raw;",
							"    console.log(sPayload);",
							"    ",
							"    //Creating Signature",
							"    var sJWT = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, privateKey);",
							"    console.log(\"JWT:\" +  sJWT);",
							"    var detachedJWT = sJWT.split(\".\",1)+\"..\" + sJWT.split(\".\")[2];",
							"    console.log(\"detached JWT:\" +  detachedJWT);",
							"    pm.environment.set(\"Signature\", detachedJWT);",
							"}",
							"var newguid = (function() {",
							"  function s4() {",
							"    return Math.floor((1 + Math.random()) * 0x10000)",
							"               .toString(16)",
							"               .substring(1);",
							"  }",
							"  return function() {",
							"    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
							"           s4() + '-' + s4() + s4() + s4();",
							"  };",
							"})();",
							"",
							"//Change Request Guid on body",
							"pm.environment.set(\"request_guid\",newguid())",
							"//download forgeJS from web and set varible",
							"if(!pm.globals.has(\"RSAJS\")){",
							"        pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/jsrsasign/8.0.12/jsrsasign-all-min.js\", function (err, res) {",
							"        if (err) {",
							"            console.log(err);}",
							"        else {",
							"            pm.globals.set(\"RSAJS\", res.text());",
							"            runit();",
							"        }",
							"})}",
							"else {runit(); }",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "820423fc-c70e-4000-ba9c-155a1f8e1281",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Account",
			"item": [
				{
					"name": "List Accounts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6a7ad1d3-2791-4049-82e0-08148b485094",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "{{accept}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "sandbox_id",
								"value": "{{sandbox_id}}",
								"type": "text"
							},
							{
								"key": "Client-Id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "Request-Id",
								"value": "{{request_guid}}",
								"type": "text"
							},
							{
								"key": "Consent-Id",
								"value": "{{Consent-Id}}",
								"type": "text"
							},
							{
								"key": "X-Consent-Check",
								"value": "{{X-Consent-Check}}",
								"type": "text"
							},
							{
								"key": "X-Certificate-Check",
								"value": "{{X-Certificate-Check}}",
								"type": "text"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "{{TPP-Signature-Certificate}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{Signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{request_guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"userId\": \"{{user_id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/account/list",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"account",
								"list"
							]
						},
						"description": "List of NBG domestic accounts in euro"
					},
					"response": []
				},
				{
					"name": "Account details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1d253965-5e2d-4e5d-bff9-1f392932082c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "{{accept}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "sandbox_id",
								"value": "{{sandbox_id}}",
								"type": "text"
							},
							{
								"key": "Client-Id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "Request-Id",
								"value": "{{request_guid}}",
								"type": "text"
							},
							{
								"key": "Consent-Id",
								"value": "{{Consent-Id}}",
								"type": "text"
							},
							{
								"key": "X-Consent-Check",
								"value": "{{X-Consent-Check}}",
								"type": "text"
							},
							{
								"key": "X-Certificate-Check",
								"value": "{{X-Certificate-Check}}",
								"type": "text"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "{{TPP-Signature-Certificate}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{Signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{request_guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"account\": \"{{account_number}}\",\n        \"userId\": \"{{user_id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/account/details",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"account",
								"details"
							]
						},
						"description": "Retrieves information of a specified account"
					},
					"response": []
				},
				{
					"name": "List Beneficiaries",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c9aad094-b9b0-477e-8cbb-c636bed80a4e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "{{accept}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "sandbox_id",
								"value": "{{sandbox_id}}",
								"type": "text"
							},
							{
								"key": "Client-Id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "Request-Id",
								"value": "{{request_guid}}",
								"type": "text"
							},
							{
								"key": "Consent-Id",
								"value": "{{Consent-Id}}",
								"type": "text"
							},
							{
								"key": "X-Consent-Check",
								"value": "{{X-Consent-Check}}",
								"type": "text"
							},
							{
								"key": "X-Certificate-Check",
								"value": "{{X-Certificate-Check}}",
								"type": "text"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "{{TPP-Signature-Certificate}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{Signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{request_guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"iban\": \"{{iban}}\",\n        \"userId\": \"{{user_id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/account/beneficiaries",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"account",
								"beneficiaries"
							]
						},
						"description": "NBG account beneficiaries (masked)"
					},
					"response": []
				},
				{
					"name": "List Transactions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "88d37c25-6025-4a61-8b6c-6c27bb3e84c5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "{{accept}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "sandbox_id",
								"value": "{{sandbox_id}}",
								"type": "text"
							},
							{
								"key": "Client-Id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "Request-Id",
								"value": "{{request_guid}}",
								"type": "text"
							},
							{
								"key": "Consent-Id",
								"value": "{{Consent-Id}}",
								"type": "text"
							},
							{
								"key": "X-Consent-Check",
								"value": "{{X-Consent-Check}}",
								"type": "text"
							},
							{
								"key": "X-Certificate-Check",
								"value": "{{X-Certificate-Check}}",
								"type": "text"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "{{TPP-Signature-Certificate}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{Signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{request_guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"account\": \"{{account_number}}\",\n        \"dateFrom\": \"2020-01-01T07:38:56.591Z\",\n        \"dateTo\": \"2020-12-31T07:38:56.591Z\",\n        \"userId\": \"{{user_id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/account/transactions",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"account",
								"transactions"
							]
						},
						"description": "Retrieves transactions of a specified account"
					},
					"response": []
				}
			],
			"description": "Folder for account",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "42a45814-79ae-40d0-adec-435092d45636",
						"type": "text/javascript",
						"exec": [
							"{//loading private key",
							"console.log(\"Now private key must be placed in plain text base64 starting and ending with '-----' lines\");",
							"console.log(\"Additionally u can use KEYUTIL for safe key storage.\" );",
							"var privateKey = pm.environment.get(\"privatekey\");",
							"//loading public key  and addit to header ",
							"console.log(\" additionally u can use KEYUTIL for safe certificate storage now is in plain text\");",
							"var publicKey = pm.environment.get(\"publiccertificate\").replace('-----BEGIN CERTIFICATE-----','').replace('-----END CERTIFICATE-----','').replace(/(?:\\r\\n|\\r|\\n)/g, '');",
							"pm.environment.set(\"TPP-Signature-Certificate\", publicKey);",
							"var Property = require('postman-collection').Property;",
							"",
							"",
							"var runit =  function(){",
							"    //loading RSA JWT library",
							"    var navigator = {};",
							"    var window = {};",
							"    eval(postman.getGlobalVariable(\"RSAJS\"));",
							"    console.log(\" now u can use KJUR as a rsa library\");",
							"    ",
							"    //prepare head",
							"    var oHeader = {\"alg\" : \"RS256\",\"typ\" : \"JWT\"};",
							"    var sHeader = JSON.stringify(oHeader);",
							"    ",
							"    //prepare pody",
							"    //var oData = {dsa:\"dsa\"};",
							"    var oRaw = pm.request.body.raw ",
							"    var oData = JSON.parse(Property.replaceSubstitutions(pm.request.body.raw , pm.variables.toObject()));",
							"    ",
							"    var sPayload = JSON.stringify(oData);",
							"    //var sPayload = pm.request.body.raw;",
							"    console.log(sPayload);",
							"    ",
							"    //Creating Signature",
							"    var sJWT = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, privateKey);",
							"    console.log(\"JWT:\" +  sJWT);",
							"    var detachedJWT = sJWT.split(\".\",1)+\"..\" + sJWT.split(\".\")[2];",
							"    console.log(\"detached JWT:\" +  detachedJWT);",
							"    pm.environment.set(\"Signature\", detachedJWT);",
							"}",
							"var newguid = (function() {",
							"  function s4() {",
							"    return Math.floor((1 + Math.random()) * 0x10000)",
							"               .toString(16)",
							"               .substring(1);",
							"  }",
							"  return function() {",
							"    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
							"           s4() + '-' + s4() + s4() + s4();",
							"  };",
							"})();",
							"",
							"//Change Request Guid on body",
							"pm.environment.set(\"request_guid\",newguid())",
							"//download forgeJS from web and set varible",
							"if(!pm.globals.has(\"RSAJS\")){",
							"        pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/jsrsasign/8.0.12/jsrsasign-all-min.js\", function (err, res) {",
							"        if (err) {",
							"            console.log(err);}",
							"        else {",
							"            pm.globals.set(\"RSAJS\", res.text());",
							"            runit();",
							"        }",
							"})}",
							"else {runit(); }",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "122e689c-c50b-4f00-8f84-f548d732c8cd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Foreign Currency Account",
			"item": [
				{
					"name": "List Accounts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "39d6295d-96ed-44af-9f04-83608dd759ff",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "{{accept}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "sandbox_id",
								"value": "{{sandbox_id}}",
								"type": "text"
							},
							{
								"key": "Client-Id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "Request-Id",
								"value": "{{request_guid}}",
								"type": "text"
							},
							{
								"key": "Consent-Id",
								"value": "{{Consent-Id}}",
								"type": "text"
							},
							{
								"key": "X-Consent-Check",
								"value": "{{X-Consent-Check}}",
								"type": "text"
							},
							{
								"key": "X-Certificate-Check",
								"value": "{{X-Certificate-Check}}",
								"type": "text"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "{{TPP-Signature-Certificate}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{Signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{request_guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"userId\": \"{{user_id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/foreign-currency-account/list",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"foreign-currency-account",
								"list"
							]
						},
						"description": "List of my accounts in foreign currency with details."
					},
					"response": []
				},
				{
					"name": "Account details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e8302d8-6052-4c77-b4c6-5d637f1b0997",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "{{accept}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "sandbox_id",
								"value": "{{sandbox_id}}",
								"type": "text"
							},
							{
								"key": "Client-Id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "Request-Id",
								"value": "{{request_guid}}",
								"type": "text"
							},
							{
								"key": "Consent-Id",
								"value": "{{Consent-Id}}",
								"type": "text"
							},
							{
								"key": "X-Consent-Check",
								"value": "{{X-Consent-Check}}",
								"type": "text"
							},
							{
								"key": "X-Certificate-Check",
								"value": "{{X-Certificate-Check}}",
								"type": "text"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "{{TPP-Signature-Certificate}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{Signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{request_guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"account\": \"{{foreign_account_number}}\",\n        \"userId\": \"{{user_id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/foreign-currency-account/details",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"foreign-currency-account",
								"details"
							]
						},
						"description": "Account details."
					},
					"response": []
				},
				{
					"name": "List Beneficiaries",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "39d70635-4a10-4b4e-82e3-819e1b5d5262",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "{{accept}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "sandbox_id",
								"value": "{{sandbox_id}}",
								"type": "text"
							},
							{
								"key": "Client-Id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "Request-Id",
								"value": "{{request_guid}}",
								"type": "text"
							},
							{
								"key": "Consent-Id",
								"value": "{{Consent-Id}}",
								"type": "text"
							},
							{
								"key": "X-Consent-Check",
								"value": "{{X-Consent-Check}}",
								"type": "text"
							},
							{
								"key": "X-Certificate-Check",
								"value": "{{X-Certificate-Check}}",
								"type": "text"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "{{TPP-Signature-Certificate}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{Signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{request_guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"account\": \"{{foreign_account_number}}\",\n        \"userId\": \"{{user_id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/foreign-currency-account/beneficiaries",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"foreign-currency-account",
								"beneficiaries"
							]
						},
						"description": "NBG Account beneficiaries masked."
					},
					"response": []
				},
				{
					"name": "List Transcations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1bc87958-8f87-4161-bf3f-326088be8a33",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "{{accept}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "sandbox_id",
								"value": "{{sandbox_id}}",
								"type": "text"
							},
							{
								"key": "Client-Id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "Request-Id",
								"value": "{{request_guid}}",
								"type": "text"
							},
							{
								"key": "Consent-Id",
								"value": "{{Consent-Id}}",
								"type": "text"
							},
							{
								"key": "X-Consent-Check",
								"value": "{{X-Consent-Check}}",
								"type": "text"
							},
							{
								"key": "X-Certificate-Check",
								"value": "{{X-Certificate-Check}}",
								"type": "text"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "{{TPP-Signature-Certificate}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{Signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{request_guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"account\": \"{{foreign_account_number}}\",\n        \"dateFrom\": \"2020-01-01T07:38:56.591Z\",\n        \"dateTo\": \"2028-03-14T07:38:56.591Z\",\n        \"userId\": \"{{user_id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/foreign-currency-account/transactions",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"foreign-currency-account",
								"transactions"
							]
						},
						"description": "Foreign Account Transcations."
					},
					"response": []
				}
			],
			"description": "Folder for foreign-currency-account",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e69172a3-ed44-4bb6-93c4-f1fb5c7b293b",
						"type": "text/javascript",
						"exec": [
							"{//loading private key",
							"console.log(\"Now private key must be placed in plain text base64 starting and ending with '-----' lines\");",
							"console.log(\"Additionally u can use KEYUTIL for safe key storage.\" );",
							"var privateKey = pm.environment.get(\"privatekey\");",
							"//loading public key  and addit to header ",
							"console.log(\" additionally u can use KEYUTIL for safe certificate storage now is in plain text\");",
							"var publicKey = pm.environment.get(\"publiccertificate\").replace('-----BEGIN CERTIFICATE-----','').replace('-----END CERTIFICATE-----','').replace(/(?:\\r\\n|\\r|\\n)/g, '');",
							"pm.environment.set(\"TPP-Signature-Certificate\", publicKey);",
							"var Property = require('postman-collection').Property;",
							"",
							"",
							"var runit =  function(){",
							"    //loading RSA JWT library",
							"    var navigator = {};",
							"    var window = {};",
							"    eval(postman.getGlobalVariable(\"RSAJS\"));",
							"    console.log(\" now u can use KJUR as a rsa library\");",
							"    ",
							"    //prepare head",
							"    var oHeader = {\"alg\" : \"RS256\",\"typ\" : \"JWT\"};",
							"    var sHeader = JSON.stringify(oHeader);",
							"    ",
							"    //prepare pody",
							"    //var oData = {dsa:\"dsa\"};",
							"    var oRaw = pm.request.body.raw ",
							"    var oData = JSON.parse(Property.replaceSubstitutions(pm.request.body.raw , pm.variables.toObject()));",
							"    ",
							"    var sPayload = JSON.stringify(oData);",
							"    //var sPayload = pm.request.body.raw;",
							"    console.log(sPayload);",
							"    ",
							"    //Creating Signature",
							"    var sJWT = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, privateKey);",
							"    console.log(\"JWT:\" +  sJWT);",
							"    var detachedJWT = sJWT.split(\".\",1)+\"..\" + sJWT.split(\".\")[2];",
							"    console.log(\"detached JWT:\" +  detachedJWT);",
							"    pm.environment.set(\"Signature\", detachedJWT);",
							"}",
							"var newguid = (function() {",
							"  function s4() {",
							"    return Math.floor((1 + Math.random()) * 0x10000)",
							"               .toString(16)",
							"               .substring(1);",
							"  }",
							"  return function() {",
							"    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
							"           s4() + '-' + s4() + s4() + s4();",
							"  };",
							"})();",
							"",
							"//Change Request Guid on body",
							"pm.environment.set(\"request_guid\",newguid())",
							"//download forgeJS from web and set varible",
							"if(!pm.globals.has(\"RSAJS\")){",
							"        pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/jsrsasign/8.0.12/jsrsasign-all-min.js\", function (err, res) {",
							"        if (err) {",
							"            console.log(err);}",
							"        else {",
							"            pm.globals.set(\"RSAJS\", res.text());",
							"            runit();",
							"        }",
							"})}",
							"else {runit(); }",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d071cd64-f139-4804-84d6-037e0b9b4778",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cards",
			"item": [
				{
					"name": "List cards",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "{{accept}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "sandbox_id",
								"value": "{{sandbox_id}}",
								"type": "text"
							},
							{
								"key": "Client-Id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "Request-Id",
								"value": "{{request_guid}}",
								"type": "text"
							},
							{
								"key": "Consent-Id",
								"value": "{{Consent-Id}}",
								"type": "text"
							},
							{
								"key": "X-Consent-Check",
								"value": "{{X-Consent-Check}}",
								"type": "text"
							},
							{
								"key": "X-Certificate-Check",
								"value": "{{X-Certificate-Check}}",
								"type": "text"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "{{TPP-Signature-Certificate}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{Signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{request_guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"userId\": \"{{user_id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/card/list",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"card",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Card details",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "{{accept}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "sandbox_id",
								"value": "{{sandbox_id}}",
								"type": "text"
							},
							{
								"key": "Client-Id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "Request-Id",
								"value": "{{request_guid}}",
								"type": "text"
							},
							{
								"key": "Consent-Id",
								"value": "{{Consent-Id}}",
								"type": "text"
							},
							{
								"key": "X-Consent-Check",
								"value": "{{X-Consent-Check}}",
								"type": "text"
							},
							{
								"key": "X-Certificate-Check",
								"value": "{{X-Certificate-Check}}",
								"type": "text"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "{{TPP-Signature-Certificate}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{Signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{request_guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"userId\": \"{{user_id}}\",\n        \"cardNumber\": \"{{cc_number}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/card/details",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"card",
								"details"
							]
						}
					},
					"response": []
				},
				{
					"name": "Card transactions",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "{{accept}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "sandbox_id",
								"value": "{{sandbox_id}}",
								"type": "text"
							},
							{
								"key": "Client-Id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "Request-Id",
								"value": "{{request_guid}}",
								"type": "text"
							},
							{
								"key": "Consent-Id",
								"value": "{{Consent-Id}}",
								"type": "text"
							},
							{
								"key": "X-Consent-Check",
								"value": "{{X-Consent-Check}}",
								"type": "text"
							},
							{
								"key": "X-Certificate-Check",
								"value": "{{X-Certificate-Check}}",
								"type": "text"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "{{TPP-Signature-Certificate}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{Signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{request_guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"userId\": \"{{user_id}}\",\n        \"cardNumber\": \"{{cc_number}}\",\n        \"dateFrom\": \"2018-03-13T07:38:56.591Z\",\n        \"dateTo\": \"2028-03-14T07:38:56.591Z\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/card/transactions",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"card",
								"transactions"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e038322c-7a66-4bf8-94c4-b10d06beef82",
						"type": "text/javascript",
						"exec": [
							"{//loading private key",
							"console.log(\"Now private key must be placed in plain text base64 starting and ending with '-----' lines\");",
							"console.log(\"Additionally u can use KEYUTIL for safe key storage.\" );",
							"var privateKey = pm.environment.get(\"privatekey\");",
							"//loading public key  and addit to header ",
							"console.log(\" additionally u can use KEYUTIL for safe certificate storage now is in plain text\");",
							"var publicKey = pm.environment.get(\"publiccertificate\").replace('-----BEGIN CERTIFICATE-----','').replace('-----END CERTIFICATE-----','').replace(/(?:\\r\\n|\\r|\\n)/g, '');",
							"pm.environment.set(\"TPP-Signature-Certificate\", publicKey);",
							"var Property = require('postman-collection').Property;",
							"",
							"",
							"var runit =  function(){",
							"    //loading RSA JWT library",
							"    var navigator = {};",
							"    var window = {};",
							"    eval(postman.getGlobalVariable(\"RSAJS\"));",
							"    console.log(\" now u can use KJUR as a rsa library\");",
							"    ",
							"    //prepare head",
							"    var oHeader = {\"alg\" : \"RS256\",\"typ\" : \"JWT\"};",
							"    var sHeader = JSON.stringify(oHeader);",
							"    ",
							"    //prepare pody",
							"    //var oData = {dsa:\"dsa\"};",
							"    var oRaw = pm.request.body.raw ",
							"    var oData = JSON.parse(Property.replaceSubstitutions(pm.request.body.raw , pm.variables.toObject()));",
							"    ",
							"    var sPayload = JSON.stringify(oData);",
							"    //var sPayload = pm.request.body.raw;",
							"    console.log(sPayload);",
							"    ",
							"    //Creating Signature",
							"    var sJWT = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, privateKey);",
							"    console.log(\"JWT:\" +  sJWT);",
							"    var detachedJWT = sJWT.split(\".\",1)+\"..\" + sJWT.split(\".\")[2];",
							"    console.log(\"detached JWT:\" +  detachedJWT);",
							"    pm.environment.set(\"Signature\", detachedJWT);",
							"}",
							"var newguid = (function() {",
							"  function s4() {",
							"    return Math.floor((1 + Math.random()) * 0x10000)",
							"               .toString(16)",
							"               .substring(1);",
							"  }",
							"  return function() {",
							"    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
							"           s4() + '-' + s4() + s4() + s4();",
							"  };",
							"})();",
							"",
							"//Change Request Guid on body",
							"pm.environment.set(\"request_guid\",newguid())",
							"//download forgeJS from web and set varible",
							"if(!pm.globals.has(\"RSAJS\")){",
							"        pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/jsrsasign/8.0.12/jsrsasign-all-min.js\", function (err, res) {",
							"        if (err) {",
							"            console.log(err);}",
							"        else {",
							"            pm.globals.set(\"RSAJS\", res.text());",
							"            runit();",
							"        }",
							"})}",
							"else {runit(); }",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9b228c53-dfd0-46d1-b892-8a6db544a1f0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "User",
			"item": [
				{
					"name": "User Details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fc193560-1310-4b5f-be50-06a2f09c98b2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "{{accept}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "sandbox_id",
								"value": "{{sandbox_id}}"
							},
							{
								"key": "Client-Id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "Request-Id",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "X-Certificate-Check",
								"value": "{{X-Certificate-Check}}",
								"type": "text"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "{{TPP-Signature-Certificate}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{Signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{request_guid}}\",\n        \"application\": \"{{client_id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/user/current",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"user",
								"current"
							]
						},
						"description": "Info about the logged in user."
					},
					"response": []
				}
			],
			"description": "Folder for user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "abffd6c2-f671-4389-a260-32cbd6dc1739",
						"type": "text/javascript",
						"exec": [
							"{//loading private key",
							"console.log(\"Now private key must be placed in plain text base64 starting and ending with '-----' lines\");",
							"console.log(\"Additionally u can use KEYUTIL for safe key storage.\" );",
							"var privateKey = pm.environment.get(\"privatekey\");",
							"//loading public key  and addit to header ",
							"console.log(\" additionally u can use KEYUTIL for safe certificate storage now is in plain text\");",
							"var publicKey = pm.environment.get(\"publiccertificate\").replace('-----BEGIN CERTIFICATE-----','').replace('-----END CERTIFICATE-----','').replace(/(?:\\r\\n|\\r|\\n)/g, '');",
							"pm.environment.set(\"TPP-Signature-Certificate\", publicKey);",
							"var Property = require('postman-collection').Property;",
							"",
							"",
							"var runit =  function(){",
							"    //loading RSA JWT library",
							"    var navigator = {};",
							"    var window = {};",
							"    eval(postman.getGlobalVariable(\"RSAJS\"));",
							"    console.log(\" now u can use KJUR as a rsa library\");",
							"    ",
							"    //prepare head",
							"    var oHeader = {\"alg\" : \"RS256\",\"typ\" : \"JWT\"};",
							"    var sHeader = JSON.stringify(oHeader);",
							"    ",
							"    //prepare pody",
							"    //var oData = {dsa:\"dsa\"};",
							"    var oRaw = pm.request.body.raw ",
							"    var oData = JSON.parse(Property.replaceSubstitutions(pm.request.body.raw , pm.variables.toObject()));",
							"    ",
							"    var sPayload = JSON.stringify(oData);",
							"    //var sPayload = pm.request.body.raw;",
							"    console.log(sPayload);",
							"    ",
							"    //Creating Signature",
							"    var sJWT = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, privateKey);",
							"    console.log(\"JWT:\" +  sJWT);",
							"    var detachedJWT = sJWT.split(\".\",1)+\"..\" + sJWT.split(\".\")[2];",
							"    console.log(\"detached JWT:\" +  detachedJWT);",
							"    pm.environment.set(\"Signature\", detachedJWT);",
							"}",
							"var newguid = (function() {",
							"  function s4() {",
							"    return Math.floor((1 + Math.random()) * 0x10000)",
							"               .toString(16)",
							"               .substring(1);",
							"  }",
							"  return function() {",
							"    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
							"           s4() + '-' + s4() + s4() + s4();",
							"  };",
							"})();",
							"",
							"//Change Request Guid on body",
							"pm.environment.set(\"request_guid\",newguid())",
							"//download forgeJS from web and set varible",
							"if(!pm.globals.has(\"RSAJS\")){",
							"        pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/jsrsasign/8.0.12/jsrsasign-all-min.js\", function (err, res) {",
							"        if (err) {",
							"            console.log(err);}",
							"        else {",
							"            pm.globals.set(\"RSAJS\", res.text());",
							"            runit();",
							"        }",
							"})}",
							"else {runit(); }",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6600d38f-adc9-4a6d-8636-1307c2ea9118",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Standing orders",
			"item": [
				{
					"name": "List standing orders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "73607062-0e48-4ddf-84ba-ba4586743827",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "{{accept}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "sandbox_id",
								"value": "{{sandbox_id}}",
								"type": "text"
							},
							{
								"key": "Client-Id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "Request-Id",
								"value": "{{request_guid}}",
								"type": "text"
							},
							{
								"key": "Consent-Id",
								"value": "{{Consent-Id}}",
								"type": "text"
							},
							{
								"key": "X-Consent-Check",
								"value": "{{X-Consent-Check}}",
								"type": "text"
							},
							{
								"key": "X-Certificate-Check",
								"value": "{{X-Certificate-Check}}",
								"type": "text"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "{{TPP-Signature-Certificate}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{Signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{request_guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"account\": \"{{account_number}}\",\n        \"dateFrom\": \"2008-03-13T07:38:56.591Z\",\n        \"dateTo\": \"2028-03-14T07:38:56.591Z\",\n        \"userId\": \"{{user_id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/standing-orders/list",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"standing-orders",
								"list"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "01c24e03-92e7-4f9e-8a0f-6ee685009eb3",
						"type": "text/javascript",
						"exec": [
							"{//loading private key",
							"console.log(\"Now private key must be placed in plain text base64 starting and ending with '-----' lines\");",
							"console.log(\"Additionally u can use KEYUTIL for safe key storage.\" );",
							"var privateKey = pm.environment.get(\"privatekey\");",
							"//loading public key  and addit to header ",
							"console.log(\" additionally u can use KEYUTIL for safe certificate storage now is in plain text\");",
							"var publicKey = pm.environment.get(\"publiccertificate\").replace('-----BEGIN CERTIFICATE-----','').replace('-----END CERTIFICATE-----','').replace(/(?:\\r\\n|\\r|\\n)/g, '');",
							"pm.environment.set(\"TPP-Signature-Certificate\", publicKey);",
							"var Property = require('postman-collection').Property;",
							"",
							"",
							"var runit =  function(){",
							"    //loading RSA JWT library",
							"    var navigator = {};",
							"    var window = {};",
							"    eval(postman.getGlobalVariable(\"RSAJS\"));",
							"    console.log(\" now u can use KJUR as a rsa library\");",
							"    ",
							"    //prepare head",
							"    var oHeader = {\"alg\" : \"RS256\",\"typ\" : \"JWT\"};",
							"    var sHeader = JSON.stringify(oHeader);",
							"    ",
							"    //prepare pody",
							"    //var oData = {dsa:\"dsa\"};",
							"    var oRaw = pm.request.body.raw ",
							"    var oData = JSON.parse(Property.replaceSubstitutions(pm.request.body.raw , pm.variables.toObject()));",
							"    ",
							"    var sPayload = JSON.stringify(oData);",
							"    //var sPayload = pm.request.body.raw;",
							"    console.log(sPayload);",
							"    ",
							"    //Creating Signature",
							"    var sJWT = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, privateKey);",
							"    console.log(\"JWT:\" +  sJWT);",
							"    var detachedJWT = sJWT.split(\".\",1)+\"..\" + sJWT.split(\".\")[2];",
							"    console.log(\"detached JWT:\" +  detachedJWT);",
							"    pm.environment.set(\"Signature\", detachedJWT);",
							"}",
							"var newguid = (function() {",
							"  function s4() {",
							"    return Math.floor((1 + Math.random()) * 0x10000)",
							"               .toString(16)",
							"               .substring(1);",
							"  }",
							"  return function() {",
							"    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
							"           s4() + '-' + s4() + s4() + s4();",
							"  };",
							"})();",
							"",
							"//Change Request Guid on body",
							"pm.environment.set(\"request_guid\",newguid())",
							"//download forgeJS from web and set varible",
							"if(!pm.globals.has(\"RSAJS\")){",
							"        pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/jsrsasign/8.0.12/jsrsasign-all-min.js\", function (err, res) {",
							"        if (err) {",
							"            console.log(err);}",
							"        else {",
							"            pm.globals.set(\"RSAJS\", res.text());",
							"            runit();",
							"        }",
							"})}",
							"else {runit(); }",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f49ec6a9-eba5-49ee-97f9-d94b07d1a10b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Scheduled payments",
			"item": [
				{
					"name": "List scheduled payments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ed60a21f-c655-4d9d-b388-eb9ab8828b6b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "{{accept}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "sandbox_id",
								"type": "text",
								"value": "{{sandbox_id}}"
							},
							{
								"key": "Client-Id",
								"type": "text",
								"value": "{{client_id}}"
							},
							{
								"key": "Request-Id",
								"type": "text",
								"value": "{{request_guid}}"
							},
							{
								"key": "Consent-Id",
								"type": "text",
								"value": "{{Consent-Id}}"
							},
							{
								"key": "X-Consent-Check",
								"type": "text",
								"value": "{{X-Consent-Check}}"
							},
							{
								"key": "X-Certificate-Check",
								"value": "{{X-Certificate-Check}}",
								"type": "text"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "{{TPP-Signature-Certificate}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{Signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{request_guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"account\": \"{{account_number}}\",\n        \"dateFrom\": \"2019-06-13T07:38:56.591Z\",\n        \"dateTo\": \"2019-06-27T07:38:56.591Z\",\n        \"userId\": \"{{user_id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/scheduled-payments/list",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"scheduled-payments",
								"list"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "61832651-5a72-411e-b684-ecdb39189229",
						"type": "text/javascript",
						"exec": [
							"{//loading private key",
							"console.log(\"Now private key must be placed in plain text base64 starting and ending with '-----' lines\");",
							"console.log(\"Additionally u can use KEYUTIL for safe key storage.\" );",
							"var privateKey = pm.environment.get(\"privatekey\");",
							"//loading public key  and addit to header ",
							"console.log(\" additionally u can use KEYUTIL for safe certificate storage now is in plain text\");",
							"var publicKey = pm.environment.get(\"publiccertificate\").replace('-----BEGIN CERTIFICATE-----','').replace('-----END CERTIFICATE-----','').replace(/(?:\\r\\n|\\r|\\n)/g, '');",
							"pm.environment.set(\"TPP-Signature-Certificate\", publicKey);",
							"var Property = require('postman-collection').Property;",
							"",
							"",
							"var runit =  function(){",
							"    //loading RSA JWT library",
							"    var navigator = {};",
							"    var window = {};",
							"    eval(postman.getGlobalVariable(\"RSAJS\"));",
							"    console.log(\" now u can use KJUR as a rsa library\");",
							"    ",
							"    //prepare head",
							"    var oHeader = {\"alg\" : \"RS256\",\"typ\" : \"JWT\"};",
							"    var sHeader = JSON.stringify(oHeader);",
							"    ",
							"    //prepare pody",
							"    //var oData = {dsa:\"dsa\"};",
							"    var oRaw = pm.request.body.raw ",
							"    var oData = JSON.parse(Property.replaceSubstitutions(pm.request.body.raw , pm.variables.toObject()));",
							"    ",
							"    var sPayload = JSON.stringify(oData);",
							"    //var sPayload = pm.request.body.raw;",
							"    console.log(sPayload);",
							"    ",
							"    //Creating Signature",
							"    var sJWT = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, privateKey);",
							"    console.log(\"JWT:\" +  sJWT);",
							"    var detachedJWT = sJWT.split(\".\",1)+\"..\" + sJWT.split(\".\")[2];",
							"    console.log(\"detached JWT:\" +  detachedJWT);",
							"    pm.environment.set(\"Signature\", detachedJWT);",
							"}",
							"var newguid = (function() {",
							"  function s4() {",
							"    return Math.floor((1 + Math.random()) * 0x10000)",
							"               .toString(16)",
							"               .substring(1);",
							"  }",
							"  return function() {",
							"    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
							"           s4() + '-' + s4() + s4() + s4();",
							"  };",
							"})();",
							"",
							"//Change Request Guid on body",
							"pm.environment.set(\"request_guid\",newguid())",
							"//download forgeJS from web and set varible",
							"if(!pm.globals.has(\"RSAJS\")){",
							"        pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/jsrsasign/8.0.12/jsrsasign-all-min.js\", function (err, res) {",
							"        if (err) {",
							"            console.log(err);}",
							"        else {",
							"            pm.globals.set(\"RSAJS\", res.text());",
							"            runit();",
							"        }",
							"})}",
							"else {runit(); }",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1d36d6a9-149f-42b9-9e1a-cc0548c5eb4a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}
